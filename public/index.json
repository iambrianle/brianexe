[{"content":"Basic HTML Welcome to the world of HTML! In this cheat sheet, I\u0026rsquo;ll show you everything you need to know to get started with HTML and create your own web pages.\nHTML Structure Every HTML document follows a basic structure:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Page Title\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!-- Your content goes here --\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Let\u0026rsquo;s break down the structure:\n\u0026lt;!DOCTYPE html\u0026gt; declares the document type and must be placed at the very beginning of the HTML file.\nThe \u0026lt;html\u0026gt; element is the root element of the HTML document and contains all other elements.\nInside the \u0026lt;html\u0026gt; element, we have the \u0026lt;head\u0026gt; element, which contains metadata about the document, such as the page title.\nThe \u0026lt;title\u0026gt; element is placed inside the \u0026lt;head\u0026gt; element and sets the title of the web page, which appears in the browser\u0026rsquo;s title bar or tab.\nThe \u0026lt;body\u0026gt; element contains the visible content of the web page. This is where you can add text, images, links, and other elements.\nHeading and Paragraph To create headings and paragraphs in HTML, you can use the following tags:\n\u0026lt;h1\u0026gt; to \u0026lt;h6\u0026gt;: These tags represent different levels of headings, with \u0026lt;h1\u0026gt; being the highest and \u0026lt;h6\u0026gt; being the lowest. Example: \u0026lt;h1\u0026gt;This is a Heading Level 1\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;This is a Heading Level 2\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;: This tag is used to create paragraphs of text. Example: \u0026lt;p\u0026gt;This is a paragraph.\u0026lt;/p\u0026gt; Links To create links in HTML, you can use the \u0026lt;a\u0026gt; tag with the href attribute. The href attribute specifies the destination of the link (the URL of the web page). Example:\n\u0026lt;a href=\u0026#34;https://www.example.com\u0026#34;\u0026gt;Click here\u0026lt;/a\u0026gt; to visit our website. Images To add images to your web page, use the \u0026lt;img\u0026gt; tag with the src attribute. The src attribute specifies the path to the image file. Example:\n\u0026lt;img src=\u0026#34;image.jpg\u0026#34; alt=\u0026#34;Description of the image\u0026#34;\u0026gt; The alt attribute provides alternative text for the image, which is displayed if the image cannot be loaded.\nLists There are two types of lists in HTML: ordered lists and unordered lists.\nOrdered lists (\u0026lt;ol\u0026gt;) are used for numbered lists. Example: \u0026lt;ol\u0026gt; \u0026lt;li\u0026gt;Item 1\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Item 2\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; Unordered lists (\u0026lt;ul\u0026gt;) are used for bullet point lists. Example: \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;Item 1\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Item 2\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; Tables To create tables in HTML, you can use the \u0026lt;table\u0026gt; tag along with other table-related tags such as \u0026lt;tr\u0026gt; (table row), \u0026lt;th\u0026gt; (table header), and \u0026lt;td\u0026gt; (table data). Example:\n\u0026lt;table\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;Name\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Age\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;John\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;25\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Jane\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;30\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; CSS CSS (Cascading Style Sheets) is used to style your HTML elements. You can apply CSS styles to HTML elements using the style attribute or by linking an external CSS file.\nInline CSS (using the style attribute): Example: \u0026lt;p style=\u0026#34;color: blue;\u0026#34;\u0026gt;This paragraph is blue.\u0026lt;/p\u0026gt; External CSS (using a separate CSS file): Create a separate CSS file with a .css extension and link it to your HTML file using the \u0026lt;link\u0026gt; tag. Example: \u0026lt;head\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;styles.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; Conclusion By now, you should have a good understanding of the basic HTML tags and structure. Remember to practice and experiment with HTML to further enhance your skills. Happy coding!\nNext Steps Ready to learn more about HTML? Check out W3Schools for detailed tutorials and examples.\nSources Adapted from various HTML resources and personal knowledge.\n","permalink":"https://notbrian.me/posts/html-cheat-sheet/","summary":"Basic HTML Welcome to the world of HTML! In this cheat sheet, I\u0026rsquo;ll show you everything you need to know to get started with HTML and create your own web pages.\nHTML Structure Every HTML document follows a basic structure:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Page Title\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!-- Your content goes here --\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Let\u0026rsquo;s break down the structure:\n\u0026lt;!DOCTYPE html\u0026gt; declares the document type and must be placed at the very beginning of the HTML file.","title":"Here is the Best Beginner-Friendly HTML Cheatsheet"},{"content":"Basic Python In this post, I\u0026rsquo;ll show you everything you need to know to start coding in Python and score high on basic Python tests I wish I had 4 years ago. Let\u0026rsquo;s dive right in!\nComments Inline comment:\n# This is a comment Multiline comment:\n# This is a # multiline comment Code with a comment:\na = 1 # Initialization Please note the two spaces in front of the comment.\nMath Operators From highest to lowest precedence:\nOperators Operation Example ** Exponent 2 ** 3 = 8 % Modulus/Remainder 22 % 8 = 6 // Integer Division 22 // 8 = 2 / Division 22 / 8 = 2.75 * Multiplication 3 * 3 = 9 - Subtraction 5 - 2 = 3 + Addition 2 + 2 = 4 Examples of expressions:\n\u0026gt;\u0026gt;\u0026gt; 2 + 3 * 6 # 20 \u0026gt;\u0026gt;\u0026gt; (2 + 3) * 6 # 30 \u0026gt;\u0026gt;\u0026gt; 2 ** 8 #256 \u0026gt;\u0026gt;\u0026gt; 23 // 7 # 3 \u0026gt;\u0026gt;\u0026gt; 23 % 7 # 2 \u0026gt;\u0026gt;\u0026gt; (5 - 1) * ((7 + 1) / (3 - 1)) # 16.0 Data Types Data Type Examples Integers -2, -1, 0, 1, 2, 3, 4, 5 Floating-Point Numbers -1.25, -1.0, -0.5, 0.0, 0.5, 1.0, 1.25 Strings 'a', 'aa', 'aaa', 'hello!', '11 cats', '123' Important: Note that \u0026lsquo;123\u0026rsquo; is still a string.\nVariables You can name a variable anything as long as it obeys the following rules:\nIt can be only one word. \u0026gt;\u0026gt;\u0026gt; # Bad \u0026gt;\u0026gt;\u0026gt; my_variable = \u0026#39;hello\u0026#39; \u0026gt;\u0026gt;\u0026gt; # Good \u0026gt;\u0026gt;\u0026gt; var = \u0026#39;hello\u0026#39; It can use only letters, numbers, and the underscore (_) character. \u0026gt;\u0026gt;\u0026gt; # Bad \u0026gt;\u0026gt;\u0026gt; %$@variable = \u0026#39;hello\u0026#39; \u0026gt;\u0026gt;\u0026gt; # Good \u0026gt;\u0026gt;\u0026gt; my_var = \u0026#39;hello\u0026#39; \u0026gt;\u0026gt;\u0026gt; # Good \u0026gt;\u0026gt;\u0026gt; my_var_2 = \u0026#39;hello\u0026#39; It can\u0026rsquo;t begin with a number. \u0026gt;\u0026gt;\u0026gt; # This won\u0026#39;t work \u0026gt;\u0026gt;\u0026gt; 23_var = \u0026#39;hello\u0026#39; Variable names starting with an underscore (_) are considered as \u0026ldquo;unuseful\u0026rdquo;. \u0026gt;\u0026gt;\u0026gt; # _spam should not be used again in the code \u0026gt;\u0026gt;\u0026gt; _spam = \u0026#39;hello\u0026#39; The print() Function The print() function writes the value of the argument(s) it is given. It handles multiple arguments, floating-point numbers, integers, and strings. Strings are printed without quotes, and a space is inserted when items are separated by a comma: \u0026gt;\u0026gt;\u0026gt; print(\u0026#39;hello world!\u0026#39;) # Output: hello world! \u0026gt;\u0026gt;\u0026gt; a = 1 \u0026gt;\u0026gt;\u0026gt; print(\u0026#39;hello world!\u0026#39;, a) # Output: hello world! 1 Concatenate items \u0026gt;\u0026gt;\u0026gt; # Good \u0026gt;\u0026gt;\u0026gt; a = \u0026#39;joe\u0026#39; \u0026gt;\u0026gt;\u0026gt; print(\u0026#39;hello world!\u0026#39; + a) # Output: hello world!joe \u0026gt;\u0026gt;\u0026gt; # Bad \u0026gt;\u0026gt;\u0026gt; a = 1 # Integer(int) \u0026gt;\u0026gt;\u0026gt; print(\u0026#39;hello world!\u0026#39; + a) # String(str) + Integer(int) # TypeError: can only concatenate str (not \u0026#34;int\u0026#34;) to str The input() Function This function takes the input from the user and converts it into a string:\n\u0026gt;\u0026gt;\u0026gt; print(\u0026#39;What is your name?\u0026#39;) # Ask for their name \u0026gt;\u0026gt;\u0026gt; my_name = input() \u0026gt;\u0026gt;\u0026gt; print(\u0026#39;Hi\u0026#39;, my_name) # What is your name? # Martha # Hi, Martha input() can also set a default message without using print():\n\u0026gt;\u0026gt;\u0026gt; my_name = input(\u0026#39;What is your name? \u0026#39;) # Default message \u0026gt;\u0026gt;\u0026gt; print(\u0026#39;Hi\u0026#39;, my_name) # What is your name? Martha # Hi, Martha The str(), int(), and float() Functions These functions allow you to change the type of a variable. For example, you can transform an integer or float to a string:\n\u0026gt;\u0026gt;\u0026gt; str(29) # str # \u0026#39;29\u0026#39; \u0026gt;\u0026gt;\u0026gt; str(-3.14) # str # \u0026#39;-3.14\u0026#39; Or from a string to an integer or float:\n\u0026gt;\u0026gt;\u0026gt; int(\u0026#39;11\u0026#39;) # Integer # 11 \u0026gt;\u0026gt;\u0026gt; float(\u0026#39;3.14\u0026#39;) # Decimal # 3.14 Conditions To do this in Python, you use the if, else, and elif keywords. These two keywords are called conditionals.\nUse the if keyword in Python \u0026gt;\u0026gt;\u0026gt; if condition: ... Indented block of decision to make if condition is true \u0026gt;\u0026gt;\u0026gt; # Example \u0026gt;\u0026gt;\u0026gt; team_brian = 99 \u0026gt;\u0026gt;\u0026gt; team_jack = 59 \u0026gt;\u0026gt;\u0026gt; if team_brian \u0026gt; team_jack: ... print(\u0026#34;Team Brian won the league\u0026#34;) # Output: Team Brian won the league Important: If the condition in the if statement is not met, nothing happens.\n\u0026gt;\u0026gt;\u0026gt; team_brian = 59 \u0026gt;\u0026gt;\u0026gt; team_jack = 99 \u0026gt;\u0026gt;\u0026gt; if team_brian \u0026gt; team_jack: ... print(\u0026#34;Team Brian won the league\u0026#34;) # Output: Nothing will output because if statement is not met Use the else keyword in Python. Since nothing happens if the condition in an if statement is not met, you can catch that with an else statement.\n\u0026gt;\u0026gt;\u0026gt; if condition: ... Indented block of decision to make if condition is true ... else: ... Indented block of decision to make if condition is not true \u0026gt;\u0026gt;\u0026gt; # Example \u0026gt;\u0026gt;\u0026gt; team_brian = 59 \u0026gt;\u0026gt;\u0026gt; team_jack = 99 \u0026gt;\u0026gt;\u0026gt; if team_brian \u0026gt; team_jack: ... print(\u0026#34;Team Brian won the league\u0026#34;) ... else: ... print(\u0026#34;Team Jack won the league\u0026#34;) # Output: Team Jack won the league Use the elif keyword in Python Another conditional keyword in Python is elif, which you can put in between an if and else. elif is more specific than else.\n\u0026gt;\u0026gt;\u0026gt; # Example \u0026gt;\u0026gt;\u0026gt; team_brian = 59 \u0026gt;\u0026gt;\u0026gt; team_jack = 89 \u0026gt;\u0026gt;\u0026gt; team_lilian = 99 \u0026gt;\u0026gt;\u0026gt; if team_brian \u0026gt; team_jack: ... print(\u0026#34;Team Brian won the league\u0026#34;) ... elif team_lilian \u0026gt; team_brian: ... print(\u0026#34;Team Lilian won the league\u0026#34;) ... else: ... print(\u0026#34;Team Jack won the league\u0026#34;) # Output: Team Lilian won the league Import Basically, import allows you to use pre-written code of someone else who already wrote the code and is willing to share it.\nThis code would have to be written if the random module was not used\n# This code doesn\u0026#39;t work as it is only a small portion of the random module def randrange(self, start, stop=none, step=_one): \u0026#34;\u0026#34;\u0026#34;Choose a random item from range(stop) or range(start, stop[, step]). Roughly equivalent to `choice(range(start, stop, step))` but supports arbitrarily large ranges and is optimized for common cases. \u0026#34;\u0026#34;\u0026#34; # This code is a bit messy to make it fast for the # Common case while still doing adequate error checking. istart = _index(start) if stop is none: # We don\u0026#39;t check for \u0026#34;step != 1\u0026#34; because it hasn\u0026#39;t been # Type checked and converted to an integer yet. if step is not _one: raise TypeError(\u0026#34;Missing a non-None stop argument\u0026#34;) if istart \u0026gt; 0: return self._randbelow(istart) raise ValueError(\u0026#34;Empty range for randrange()\u0026#34;) # Stop argument supplied. istop = _index(stop) width = istop - istart istep = _index(step) # Fast path. if istep == 1: if width \u0026gt; 0: return istart + self._randbelow(width) raise ValueError(f\u0026#34;Empty range in randrange({start}, {stop})\u0026#34;) # Non-unit step argument supplied. if istep \u0026gt; 0: n = (width + istep - 1) // istep elif istep \u0026lt; 0: n = (width + istep + 1) // istep else: raise ValueError(\u0026#34;Zero step for randrange()\u0026#34;) if n \u0026lt;= 0: raise ValueError(f\u0026#34;Empty range in randrange({start}, {stop}, {step})\u0026#34;) return istart + istep * self._randbelow(n) def randint(self, a, b): \u0026#34;\u0026#34;\u0026#34;Return random integer in range [a, b], including both end points. \u0026#34;\u0026#34;\u0026#34; return self.randrange(a, b+1) random = random.randint(1,100) # Generate random number between 1 and 100 print(random) But if the random module was used, it will be much easier and more efficient to write your code.\nimport random random = random.randint(1,100) # Generate random number between 1 and 100 print(random) While Loop Statements The while statement is used for repeated execution as long as an expression is True:\n\u0026gt;\u0026gt;\u0026gt; spam = 0 \u0026gt;\u0026gt;\u0026gt; while spam \u0026lt; 5: ... print(\u0026#39;Brian\u0026#39;) ... spam = spam + 1 ... # Output: # Brian # Brian # Brian # Brian # Brian Break Statements If the execution reaches a break statement, it immediately exits the while loop’s clause:\n\u0026gt;\u0026gt;\u0026gt; while True: # Infinite loop ... name = input(\u0026#39;Please type your name: \u0026#39;) ... if name == \u0026#39;your name\u0026#39;: ... break ... \u0026gt;\u0026gt;\u0026gt; print(\u0026#39;Thank you!\u0026#39;) # Please type your name: your name # Thank you! Continue Statements When the program execution reaches a continue statement, the program execution immediately jumps back to the start of the loop.\n\u0026gt;\u0026gt;\u0026gt; while True: ... name = input(\u0026#39;Who are you? \u0026#39;) ... if name != \u0026#39;Joe\u0026#39;: ... continue ... password = input(\u0026#39;Password? (It is a fish.): \u0026#39;) ... if password == \u0026#39;swordfish\u0026#39;: ... break ... \u0026gt;\u0026gt;\u0026gt; print(\u0026#39;Access granted.\u0026#39;) # Who are you? Charles # Who are you? Debora # Who are you? Joe # Password? (It is a fish.): swordfish # Access granted. Cool Things to Know Concatenation and Replication String concatenation:\n\u0026gt;\u0026gt;\u0026gt; \u0026#39;Alice\u0026#39; \u0026#39;Bob\u0026#39; # \u0026#39;AliceBob\u0026#39; String replication:\n\u0026gt;\u0026gt;\u0026gt; \u0026#39;Alice\u0026#39; * 5 # \u0026#39;AliceAliceAliceAliceAlice\u0026#39; The end Keyword The keyword argument end can be used to avoid the newline after the output or end the output with a different string:\nphrase = [\u0026#39;Printed\u0026#39;, \u0026#39;with\u0026#39;, \u0026#39;a\u0026#39;, \u0026#39;dash\u0026#39;, \u0026#39;in\u0026#39;, \u0026#39;between\u0026#39;] \u0026gt;\u0026gt;\u0026gt; for word in phrase: ... print(word, end=\u0026#39;-\u0026#39;) ... # Printed-with-a-dash-in-between- The sep Keyword The keyword sep specifies how to separate the objects if there is more than one:\nprint(\u0026#39;Jack\u0026#39;, \u0026#39;Lilian\u0026#39;, \u0026#39;Charlotte\u0026#39;, sep=\u0026#39;,\u0026#39;) # Jack,Lilian,Charlotte Conclusion Now I\u0026rsquo;d Like to Hear From You: How did you think of my cheat sheet? What is your favorite thing about Python? Comment below to let me know!\nNext Step Visit my blog next week where I will dive deep into Python!\nSource Summarized from the Python 3 tutorial.\n","permalink":"https://notbrian.me/posts/python-cheat-sheet/","summary":"Basic Python In this post, I\u0026rsquo;ll show you everything you need to know to start coding in Python and score high on basic Python tests I wish I had 4 years ago. Let\u0026rsquo;s dive right in!\nComments Inline comment:\n# This is a comment Multiline comment:\n# This is a # multiline comment Code with a comment:\na = 1 # Initialization Please note the two spaces in front of the comment.","title":"Here is the Best Beginner-Friendly Python Cheatsheet (2022)"},{"content":" What\u0026rsquo;s Hugo? Hugo is a static site generator that enables you to create static files like HTML, CSS, and JavaScript in advance. It is a Go-based open-source project that promises remarkable build times that are unmatched.\nWhat Does It Do? It aids in the conversion of Markdown files—the formats in which you will write your articles or blog posts—into static files that will be served afterwards.\nHow Is It Different? This is distinct from more conventional approaches like a WordPress site, which requires a dedicated database and a web server to reply to queries, communicate with the database, and serve the files on each request. Since nothing is dynamic and we know the material won\u0026rsquo;t change, it is much slower than utilizing a static-site generator like Hugo. HTTP web servers are very effective and quick in serving only static material. Users request files, and the server only needs to provide them. There isn\u0026rsquo;t any additional processing applied.\nThe Benefits Your website may be set up and hosted anywhere (on GCP Cloud Storage, AWS S3, PaperMod, Firebase, etc.), and it can be deployed to a CDN (Content Delivery Network) to be cached on a global edge network, which will greatly enhance the performance and speed of page loads. This is crucial for SEO and for those with slow internet connections (Search Engine Optimization).\nCaveats That does not, however, imply that Hugo cannot be utilized in a dynamic manner. You might not be able to use Hugo if your use case is highly complex or involves user input. It could be preferable to use a standard website or single-page application built with React, Angular, Vue, or Svelte. Hugo, however, contains all the capabilities you want if all you want is a straightforward blog with a few extras, like the ability for people to leave comments.\nGet Started The Hugo documentation is very helpful and elaborate. It is the first place to check in case of references or issues.\nInstallation Hugo is available on all platforms (Windows, macOS, and Linux), as a binary that you can install, or via a package manager. If you have a compatible package manager, that is the recommended way as it is the easiest and has the least amount of work to maintain.\nInstall Using the Binaries Availabe from their GitHub releases page. (Choose the appropriate platform and type of file). Make sure to install it in a location that is somewhere in your PATH. usr/local/bin is the best place for Linux. Otherwise, append the location to your PATH variable.\nInstall Using a Package Manager On Windows\nchoco install hugo -confirm or\nscoop install hugo On Linux and macOS (Using Homebrew)\nbrew install hugo To verify that the installation occurred successfully, run the following command.\nhugo version There should not be any errors.\nCreating the Site Change directories into the location you want to create your project. Then run the following command with your project\u0026rsquo;s name. This will create a folder that contains all the files that you need to get started.\n# Creates a new site and project called \u0026#39;firstblog\u0026#39; hugo new site firstblog Change directories into the project directory that was created.\ncd firstblog You will notice a similar folder structure. The config.toml file is where all the variables and settings for your projects live. You will be able to setup and configure most of your website from that one file.\n. ├── archetypes ├── config.toml ├── content ├── data ├── layouts ├── static └── themes If you want to change the file type for your configurations, you can change it to YAML or JSON depending on your preference. You can copy and paste the contents of the file using a tool like ConvertSimple to convert the format and syntax.\nAll of the actual content that you write as Markdown files lives inside the content directory. You can organize the content in folders and subfolders, and Hugo will automatically take care of organizing the posts as categories or subcategories.\nUse the following command to create a blank Markdown file. You can specify where you want to store this file. If only the file name is provided, then it is directly placed in the content directory.\nhugo create first-post.md Or try the following to place it in content/posts:\nhugo create posts/first-post.md Front Matter Every Markdown file that is created and used for your website has a section on the top that is unique to Hugo. It starts and ends with ---. The syntax used in this is TOML by default. You can change this default setting with the following command:\n# To convert to YAML hugo convert toyaml In the front matter, you can set options for the specific page, meta data, and other configuration that is specific to this particular page. Check out the documentation of Front Matter to learn about the different options available.\nInstall a Theme One of the powers of Hugo is the ability to utilize one of the many themes created by the community. Check out the complete list and choose one of the themes. Install the theme after reading the documentation. This procedure is pretty simple. Most of the time, you will need to manually or automatically download the code and place it in the themes folder before moving it into the folder with the name of the theme you selected.\nThen make sure to go to the config file and update the theme variable with the name of the theme you have chosen.\nRunning the Site Hugo comes with a built-in web server that enables local viewing of the website, continuously checks your files for updates, and restarts itself when necessary.\nhugo server -d Deployment Hugo creates your website using the following command, outputting the finished static content by default to the public directory. If necessary, that can be changed in the config file. Whatever hosting service you decide to utilize, the contents of this file must be deployed.\nhugo -d Bonus Content Comments You can add a comments or discussion section to all of your pages (or select ones) easily using Disqus. Instructions and setup are very straightforward and simple.\nStuck? I suggest watching this video from Envato Tuts+ if you\u0026rsquo;re a beginner or alternatively you can read this article from Hugo.\nConclusion Hugo is a perfect blog builder for tech geeks out there. If you\u0026rsquo;re a beginner in coding, I suggest using WordPress to build your blog. I\u0026rsquo;ll cover WordPress in the future on my blog.\n","permalink":"https://notbrian.me/posts/blog-with-hugo/","summary":"What\u0026rsquo;s Hugo? Hugo is a static site generator that enables you to create static files like HTML, CSS, and JavaScript in advance. It is a Go-based open-source project that promises remarkable build times that are unmatched.\nWhat Does It Do? It aids in the conversion of Markdown files—the formats in which you will write your articles or blog posts—into static files that will be served afterwards.\nHow Is It Different?","title":"How to Create a Blog Using Hugo (2022)"}]